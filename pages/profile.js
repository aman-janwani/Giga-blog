import Head from "next/head";
import Image from "next/image";
import Login from "../components/Login";
import { useMoralis, useMoralisQuery } from "react-moralis";
import Header from "../components/Header";
import Sidebar from "../components/Sidebar";
import { BsFillPencilFill } from "react-icons/bs";
import { BsFillCameraFill } from "react-icons/bs";
import { useState } from "react";

function Profile() {
  const {
    isAuthenticated,
    logout,
    user,
    setUserData,
    isUserUpdating,
    userError,
    Moralis,
  } = useMoralis();

  const { data, loading, error } = useMoralisQuery(
    "Posts",
    (query) => query.descending("createdAt"),
    [],
    {
      live: true,
    }
  );

  const [username, setUsername] = useState("");
  const [edit, setEdit] = useState(false);
  const [editPic, setEditPic] = useState(false);
  const [profilePic, setProfilePic] = useState([]);

  const ChangeUsername = (e) => {
    e.preventDefault();

    if (!username) return;

    setUserData({
      username,
    });
    setEdit(false);
    setUsername("");
  };

  const UpdateProfilePic = async (e) => {
    if (profilePic.type === "image/jpeg" || profilePic.type === "image/png") {
      const filename = profilePic.name.replace(/[^a-zA-Z ]/g, "");
      const file = new Moralis.File(filename, profilePic);
      await file.saveIPFS();
      console.log(file.ipfs(), file.hash());
      setUserData({
        UserProfilePic: file.ipfs(),
      });
      // return file.ipfs();
    } else {
      alert("We Support only 'jpeg' and 'png' images");
      setProfilePic([]);
    }
    setEditPic(false);
  };

  if (!isAuthenticated) return <Login />;
  return (
    <div className="bg-white dark:bg-gigadark">
      <Head>
        <title>Profile | {user.getUsername()}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/assets/2.png" />
      </Head>
      <main className="flex flex-grow">
        <Sidebar />
        <div className="flex-1">
          <Header />
          <div className="">
            <h1 className="w-full my-5 text-center text-4xl font-semibold text-gigadark dark:text-white font-mono">
              PROFILE
            </h1>
            <div className="flex justify-center mt-10 bg-gray-100 dark:bg-gigalightpurple mx-5 p-5 rounded-xl">
              {editPic ? (
                <form className="my-auto flex flex-col space-y-3">
                  <input
                    onChange={(e) => {
                      if (e.target.files && e.target.files[0]) {
                        const img = e.target.files[0];
                        setProfilePic(img);
                      }
                    }}
                    type="file"
                    accept="image/png, image/jpeg"
                    className="bg-gigayellow p-3 rounded-lg w-60"
                  />
                  <button
                    type="submit"
                    className="bg-gigayellow p-2 rounded-lg w-20 hover:brightness-110 font-medium mx-auto"
                    onClick={(e) => {
                      e.preventDefault();
                      UpdateProfilePic();
                      console.log(profilePic);
                    }}
                  >
                    Done
                  </button>
                </form>
              ) : (
                <div className="my-auto space-x-1 hidden sm:flex">
                  {user.get("UserProfilePic") ? (
                    <Image
                      src={user.get("UserProfilePic")}
                      height={150}
                      width={150}
                      objectFit="contain"
                      className="rounded-full"
                    />
                  ) : (
                    <Image
                      src={"/assets/6.png"}
                      height={150}
                      width={150}
                      objectFit="contain"
                    />
                  )}
                  <span>
                    <BsFillCameraFill
                      className="cursor-pointer text-gigadark dark:text-white text-2xl"
                      onClick={() => setEditPic(true)}
                    />
                  </span>
                </div>
              )}
              <div className="m-10">
                {edit ? (
                  <form>
                    <input
                      type="text"
                      className="m-5 w-80 h-10 rounded-xl placeholder:text-gray-600 p-2 font-mono outline-none text-gigadark bg-gray-300 dark:bg-gigadark dark:text-gray-100 dark:placeholder:text-gray-200"
                      placeholder="Enter New Username"
                      value={username}
                      onChange={(e) => {
                        setUsername(e.target.value);
                        console.log(username);
                      }}
                    />
                    <button
                      onClick={ChangeUsername}
                      type="submit"
                      className="bg-gigayellow px-4 py-2 font-medium rounded-lg"
                    >
                      Done
                    </button>
                  </form>
                ) : (
                  <h2 className="text-gigadark dark:text-white flex text-3xl font-mono font-semibold m-5">
                    {user.getUsername()}
                    <button className="ml-4" onClick={() => setEdit(true)}>
                      <BsFillPencilFill className="text-gigadark dark:text-white text-lg" />
                    </button>
                  </h2>
                )}

                <h3 className="text-gray-600 w-96 truncate dark:text-gray-300 text-xl font-mono font-semibold m-5">
                  EthAddress: {user.get("ethAddress")}
                </h3>
              </div>
            </div>
            <h1 className="w-full text-center text-4xl font-semibold text-gigadark dark:text-white font-mono my-5">
              Your Blogs
            </h1>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-5 mx-5 text-center my-5">
              {data.map((post) => {
                const isUserPost =
                  post.get("ethAddress") === user.get("ethAddress");
                if (isUserPost) {
                  return (
                    <div
                      key={post.id}
                      className="p-5 rounded-xl bg-gray-200 dark:bg-gigalightpurple"
                    >
                      <Image
                        src={post.get("image")}
                        height={150}
                        width={300}
                        objectFit="cover"
                        className="rounded-2xl"
                      />
                      <h1 className="text-gigadark text-3xl font-mono font-semibold dark:text-white">
                        {post.get("title")}
                      </h1>
                      <p className="text-gigadark font-mono w-72 mx-auto dark:text-gray-200">
                        {post.get("content")}
                      </p>
                    </div>
                  );
                }
              })}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

export default Profile;
